//SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

contract crowdfunding {

    mapping (address => uint) public fundContributors;
    address public manager;
    uint public deadline;
    uint public targetAmount;
    uint public raisedAmount;

    struct Request {
        string description;
        address payable recipient;
        uint value;
        bool completed;
    }

    mapping (uint => Request) public requests;
    uint public numRequests;

    constructor (uint _targetAmount, uint _deadline) {
        targetAmount = _targetAmount;
        deadline = _deadline;
        manager = msg.sender;
    }

    function sendFund() public payable {
    require(block.timestamp <deadline, "crowdfunding is over");
    fundContributors[msg.sender] += msg.value;
    raisedAmount += msg.value;
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }

    function refund() public {
        require(block.timestamp > deadline && raisedAmount< targetAmount, "you are not eligible for refund");
        require(fundContributors[msg.sender] > 0);

        address payable user = payable(msg.sender);
        user.transfer(fundContributors[msg.sender]);
        fundContributors[msg.sender] = 0;
    }

    modifier onlyManager() {
        require(msg.sender == manager, "Only managers can call this function");
        _;
    }

    function createRequest(string memory _description, address payable _recipient, uint _value) public onlyManager{
        Request storage newRequest = requests[numRequests];
        numRequests++;
        newRequest.description = _description;
        newRequest.recipient = _recipient;
        newRequest.value = _value;
        newRequest.completed = false;
    }

    function makePayment (uint _requestNo) public onlyManager {
        require (raisedAmount >=targetAmount);
        Request storage thisRequest = requests[_requestNo];
        require(thisRequest.completed == false, "this request has been completed");
        thisRequest.recipient.transfer(thisRequest.value);
        thisRequest.completed = true;
    }
}

